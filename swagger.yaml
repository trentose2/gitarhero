swagger: '2.0'
info:
  version: '1.0'
  title: "Gitarhero API"
  description: If you are reading this documentation, you already know what it is meant for.
  license:
    name: MIT
    url: https://github.com/apiaryio/polls-api/blob/master/LICENSE
host: api.gitarhero.org
basePath: /api/v1
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /users:
    post:
      description: >-
        Lets newcomer register with the application.
      summary: Register
      parameters:
        - name: register
          in: body
          required: true
          schema:
            type: object
            required:
              - name
              - surname
              - username
              - email
              - password
            properties:
              name:
                type: string
              surname:
                type: string
              username:
                type: string
              email:
                type: string
              password:
                type: string
      responses:
        201:
          description: ''
    get:
      description: >-
        Gets a user's profile.
      summary: Get a user's profile
      responses:
        200:
          description: 'A JSON object representing a user profile.'
  /users/me:
    get:
      description: >-
        Gets a user personal profile.
      summary: Get personal profile
      responses:
        200:
          description: A JSON object representing a user's personal profile
  /groups:
    post:
      description: >-
        Creates a group of candidates. Candidates of a group are able to take the associated assignments.
      summary: Create a new group
      parameters:
        - name: group
          in: body
          required: true
          schema:
            type: object
            required:
              - name
              - members
            properties:
              name:
                type: string
              members:
                type: array
                items:
                  type: integer
      responses:
        201:
          description: ''
    get:
      description: >-
        Gets the groups. If the user issuing this request is a teacher, then the list represents groups that the teacher themselves have created; if it is a student, then the list represents the groups that the student themselves belong to.
      summary: Get groups
      responses:
        200:
          description: An array of JSON objects representing groups
  /groups/{id}/:
    patch:
      description: >-
        Updates the list of members of a group.
      summary: Update group members
      responses:
        200:
          description: An array representing user IDs.
      parameters:
        - name: id
          in: path
          required: true
          type: integer
  /groups/{id}/members:
    get:
      description: >-
        Gets the list of members of a group. If the user issuing this request is a teacher, then the list represents the members of a group that the teacher themselves have created; if it is a student, then the list represents the memebrs of a group that the student themselves belong to.
      summary: Get group members
      responses:
        200:
          description: An array of integers representing user IDs.
      parameters:
        - name: id
          in: path
          required: true
          type: integer
  /assignments:
    post:
      description: >-
        Creates an assignment.
      summary: Create an assignment
      parameters:
        - name: assignment
          in: body
          required: true
          schema:
            type: object
            required:
              - name
              - tasks
              - groups
              - deadline
              - status
            properties:
              name:
                type: string
              tasks:
                type: array
                items:
                  type: integer
              groups:
                type: array
                items:
                  type: integer
              deadline:
                type: string
              status:
                type: string
                enum: [open, closed]
      responses:
        201:
          description: ''
    get:
      description: >-
        Get assignments. If the user issuing this request is a teacher, then the list represents the assignments they have created; if it is a student, then the list represents the assignments they have to complete. An assignment has content such as assignment name, deadline, tasks.
      summary: Get assignments
      responses:
        200:
          description: An array of JSON objects representing assignments.
  /assignments/{id}:
    get:
      description: >-
        Gets a specific assignment. An assignment has content such as assignment name, deadline, tasks.
      summary: Get assignment
      responses:
        200:
          description: A JSON object representing an assignment.
      parameters:
        - name: id
          in: path
          required: true
          type: integer
    patch:
      description: >-
        Updates a specific assignment, marking it as closed, adding or removing a task or the task list.
      summary: Update assignment
      responses:
        200:
          description: A JSON object representing the updated assignment.
      parameters:
        - name: id
          in: path
          required: true
          type: integer
    delete:
      description: >-
        Deletes an assignment.
      summary: Delete an assignment
      responses:
        204:
          description: ''
      parameters:
        - name: id
          in: path
          required: true
          type: integer
  /tasks:
    post:
      description: >-
        Creates a new task. A task is a question or an exercise.
      summary: Create a task
      responses:
        201:
          description: ''
    delete:
      description: >-
        Deletes all tasks.
      summary: Delete all tasks
      responses:
        204:
          description: ''
  /tasks/{id}:
    delete:
      description: >-
        Deletes a task.
      summary: Delete a task
      responses:
        204:
          description: ''
      parameters:
        - name: id
          in: path
          required: true
          type: integer
    put:
      description: >-
        Updates a task.
      summary: Update a task
      responses:
        200:
          description: A JSON object representing the updated task.
      parameters:
        - name: id
          in: path
          required: true
          type: integer
  /assignments/{id}/tasks:
    get:
      description: >-
        Gets the list of the tasks composing an assignment.
      summary: Get an assignment's tasks
      responses:
        200:
          description: An array of JSON objects representing tasks.
      parameters:
        - name: id
          in: path
          required: true
          type: integer
  /assignments/{idAssignment}/tasks/{idTask}/answers:
    post:
      description: >-
        Submits an answer to a specific task of an assignment.
      summary: Submit an answer
      responses:
        201:
          description: ''
      parameters:
        - name: idAssignment
          in: path
          required: true
          type: integer
        - name: idTask
          in: path
          required: true
          type: integer
    delete:
      description: >-
        Deletes an answer. All peer reviews for that answer get cancelled too.
      summary: Delete an answer
      responses:
        204:
          description: ''
      parameters:
        - name: idAssignment
          in: path
          required: true
          type: integer
        - name: idTask
          in: path
          required: true
          type: integer
    get:
      description: >-
        Gets an answer that was previously submitted to a specific task.
      summary: Get a submitted answer
      responses:
        200:
          description: A JSON object representing an answer.
      parameters:
        - name: idAssignment
          in: path
          required: true
          type: integer
        - name: idTask
          in: path
          required: true
          type: integer
  /assignments/{idAssignment}/tasks/{idTask}/answers/reviews:
    post:
      description: >-
        Submits a peer review to an answer.
      summary: Submit a peer review
      responses:
        201:
          description: ''
      parameters:
        - name: idAssignment
          in: path
          required: true
          type: integer
        - name: idTask
          in: path
          required: true
          type: integer
    get:
      description: >-
        Gets all peer reviews of an answer.
      summary: Get all peer reviews
      responses:
        200:
          description: A JSON object representing a peer review.
      parameters:
        - name: idAssignment
          in: path
          required: true
          type: integer
        - name: idTask
          in: path
          required: true
          type: integer
  /marks:
    post:
      description: >-
        Gives a mark for an assignment made by a student.
      summary: Give a mark
      responses:
        201:
          description: ''
      parameters:
        - name: mark
          in: body
          required: true
          schema:
            type: array
            items:
              type: object
              required:
              - userId
              - assignementId
              - mark
              properties:
                userId:
                  type: integer
                assignmentId:
                  type: integer
                mark:
                  type: integer 
    get:
      description: >-
        Gets marks. It is possible to get the makrs for all the assignemnts a user has taken, or the mark for a specific exam.
      summary: Get marks
      responses:
        200:
          description: An array of JSON objects representing marks.
      parameters:
        - in: query
          name: userId
          type: integer
        - in: query
          name: assignmentId
          type: integer